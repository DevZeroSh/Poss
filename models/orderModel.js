const mongoose = require("mongoose");

const orderSchema = new mongoose.Schema(
  {
    invoiceName: String,
    employee: {
      type: mongoose.Schema.ObjectId,
      ref: "Employee",
    },
    financailFund: [
      {
        currency: String,
        currencyID: String,
        exchangeRate: String,
        label: String,
        value: String,
        _id: false,
      },
    ],
    exchangeRate: Number,
    invoicesItems: [
      {
        type: { type: String, default: "product" },
        id: String,
        qr: String,
        name: String,
        category: String,
        orginalBuyingPrice: Number,
        profitRatio: Number,
        convertedBuyingPrice: Number,
        sellingPrice: Number,
        unit: String,
        tax: { _id: String, tax: Number },
        taxValue: Number,
        stock: {
          _id: { type: mongoose.Schema.Types.ObjectId },
          stock: { type: String },
        },
        soldQuantity: Number,
        totalWithoutTax: Number,
        total: Number,
        note: String,
        exchangeRate: Number,
        discountType: String,
        discountPercentege: Number,
        discountAmount: Number,
        discount: Number,
        showNote: Boolean,
        showDiscount: Boolean,
        buyingpriceMainCurrence: Number,
        _id: false,
      },
    ],
    customer: {
      id: String,
      name: String,
      phone: String,
      email: String,
      address: String,
      company: String,
      taxAdministration: String,
      taxNumber: String,
      country: String,
      city: String,
      _id: false,
    },
    returnCartItem: [
      {
        type: { type: String, default: "product" },
        qr: String,
        name: String,
        category: String,
        orginalBuyingPrice: Number,
        profitRatio: Number,
        convertedBuyingPrice: Number,
        sellingPrice: Number,
        unit: String,
        tax: { _id: String, tax: Number },
        taxValue: Number,
        stock: {
          _id: { type: mongoose.Schema.Types.ObjectId },
          stock: { type: String },
        },
        soldQuantity: Number,
        totalWithoutTax: Number,
        total: Number,
        note: String,
        exchangeRate: Number,
        discountType: String,
        discountPercentege: Number,
        discountAmount: Number,
        discount: Number,
        showNote: Boolean,
        showDiscount: Boolean,
        buyingpriceMainCurrence: Number,
        _id: false,
      },
    ],
    taxSummary: [
      { taxRate: Number, totalTaxValue: Number, discountTaxValue: Number },
    ],
    currency: {
      value: String,
      currencyCode: String,
      exchangeRate: String,
      _id: false,
    },

    totalInMainCurrency: Number,
    manuallInvoiceDiscount: Number,
    manuallInvoiceDiscountValue: Number,
    invoiceDiscount: Number,
    ManualInvoiceDiscountValue: Number,

    currencyExchangeRate: { type: Number, default: 1 },
    orderDate: Date,
    orderNumber: String,
    SeriNumber: String,
    SiraNumber: String,
    paymentsStatus: String,
    paymentDate: Date,
    paymentDescription: { type: Number, default: 0 },
    paymentInFundCurrency: Number,
    invoiceGrandTotal: Number,
    InvoiceDiscountType: String,
    invoiceSubTotal: Number,
    invoiceTax: Number,
    invoiceType: { type: String, default: "sales" },
    payments: [
      {
        payment: Number,
        paymentMainCurrency: Number,
        financialFunds: String,
        financialFundsId: String,
        financialFundsCurrencyCode: String,
        exchangeRate: String,
        date: String,
        paymentID: String,
        paymentInInvoiceCurrency: Number,
        _id: false,
      },
    ],

    type: {
      type: String,
      enum: ["sales", "bills", "openBalance", "ecommerce", "cancel"],
      default: "sales",
    },

    fish: [String],
    counter: String,
    totalRemainderMainCurrency: { type: Number, default: 0 },
    totalRemainder: { type: Number, default: 0 },

    openingBalanceId: String,
    reportsBalanceId: String,
  },

  { timestamps: true }
);

module.exports = orderSchema;
